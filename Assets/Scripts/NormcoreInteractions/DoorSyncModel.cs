using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class DoorSyncModel
{
    [RealtimeProperty(1, true, true)]
    private bool _isOpened;

    [RealtimeProperty(2, true, false)]
    private int _playersInTrigger;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class DoorSyncModel : RealtimeModel {
    public bool isOpened {
        get {
            return _cache.LookForValueInCache(_isOpened, entry => entry.isOpenedSet, entry => entry.isOpened);
        }
        set {
            if (this.isOpened == value) return;
            _cache.UpdateLocalCache(entry => { entry.isOpenedSet = true; entry.isOpened = value; return entry; });
            InvalidateReliableLength();
            FireIsOpenedDidChange(value);
        }
    }
    
    public int playersInTrigger {
        get {
            return _cache.LookForValueInCache(_playersInTrigger, entry => entry.playersInTriggerSet, entry => entry.playersInTrigger);
        }
        set {
            if (this.playersInTrigger == value) return;
            _cache.UpdateLocalCache(entry => { entry.playersInTriggerSet = true; entry.playersInTrigger = value; return entry; });
            InvalidateReliableLength();
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(DoorSyncModel model, T value);
    public event PropertyChangedHandler<bool> isOpenedDidChange;
    
    private struct LocalCacheEntry {
        public bool isOpenedSet;
        public bool isOpened;
        public bool playersInTriggerSet;
        public int playersInTrigger;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
    
    public enum PropertyID : uint {
        IsOpened = 1,
        PlayersInTrigger = 2,
    }
    
    public DoorSyncModel() : this(null) {
    }
    
    public DoorSyncModel(RealtimeModel parent) : base(null, parent) {
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        UnsubscribeClearCacheCallback();
    }
    
    private void FireIsOpenedDidChange(bool value) {
        try {
            isOpenedDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        int length = 0;
        if (context.fullModel) {
            FlattenCache();
            length += WriteStream.WriteVarint32Length((uint)PropertyID.IsOpened, _isOpened ? 1u : 0u);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.PlayersInTrigger, (uint)_playersInTrigger);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.isOpenedSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.IsOpened, entry.isOpened ? 1u : 0u);
            }
            if (entry.playersInTriggerSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.PlayersInTrigger, (uint)entry.playersInTrigger);
            }
        }
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var didWriteProperties = false;
        
        if (context.fullModel) {
            stream.WriteVarint32((uint)PropertyID.IsOpened, _isOpened ? 1u : 0u);
            stream.WriteVarint32((uint)PropertyID.PlayersInTrigger, (uint)_playersInTrigger);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.isOpenedSet || entry.playersInTriggerSet) {
                _cache.PushLocalCacheToInflight(context.updateID);
                ClearCacheOnStreamCallback(context);
            }
            if (entry.isOpenedSet) {
                stream.WriteVarint32((uint)PropertyID.IsOpened, entry.isOpened ? 1u : 0u);
                didWriteProperties = true;
            }
            if (entry.playersInTriggerSet) {
                stream.WriteVarint32((uint)PropertyID.PlayersInTrigger, (uint)entry.playersInTrigger);
                didWriteProperties = true;
            }
            
            if (didWriteProperties) InvalidateReliableLength();
        }
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.IsOpened: {
                    bool previousValue = _isOpened;
                    _isOpened = (stream.ReadVarint32() != 0);
                    bool isOpenedExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.isOpenedSet);
                    if (!isOpenedExistsInChangeCache && _isOpened != previousValue) {
                        FireIsOpenedDidChange(_isOpened);
                    }
                    break;
                }
                case (uint)PropertyID.PlayersInTrigger: {
                    _playersInTrigger = (int)stream.ReadVarint32();
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
        }
    }
    
    #region Cache Operations
    
    private StreamEventDispatcher _streamEventDispatcher;
    
    private void FlattenCache() {
        _isOpened = isOpened;
        _playersInTrigger = playersInTrigger;
        _cache.Clear();
    }
    
    private void ClearCache(uint updateID) {
        _cache.RemoveUpdateFromInflight(updateID);
    }
    
    private void ClearCacheOnStreamCallback(StreamContext context) {
        if (_streamEventDispatcher != context.dispatcher) {
            UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
        }
        _streamEventDispatcher = context.dispatcher;
        _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
    }
    
    private void UnsubscribeClearCacheCallback() {
        if (_streamEventDispatcher != null) {
            _streamEventDispatcher.RemoveStreamCallback(ClearCache);
            _streamEventDispatcher = null;
        }
    }
    
    #endregion
}
/* ----- End Normal Autogenerated Code ----- */
