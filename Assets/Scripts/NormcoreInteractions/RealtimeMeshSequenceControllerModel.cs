using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class RealtimeMeshSequenceControllerModel
{
    [RealtimeProperty(1, true, true)]
    private int _index;

    [RealtimeProperty(2, true, true)]
    private string _materialName;

    [RealtimeProperty(3, true, false)]
    private string _geometryName;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class RealtimeMeshSequenceControllerModel : RealtimeModel {
    public int index {
        get {
            return _cache.LookForValueInCache(_index, entry => entry.indexSet, entry => entry.index);
        }
        set {
            if (this.index == value) return;
            _cache.UpdateLocalCache(entry => { entry.indexSet = true; entry.index = value; return entry; });
            InvalidateReliableLength();
            FireIndexDidChange(value);
        }
    }
    
    public string materialName {
        get {
            return _cache.LookForValueInCache(_materialName, entry => entry.materialNameSet, entry => entry.materialName);
        }
        set {
            if (this.materialName == value) return;
            _cache.UpdateLocalCache(entry => { entry.materialNameSet = true; entry.materialName = value; return entry; });
            InvalidateReliableLength();
            FireMaterialNameDidChange(value);
        }
    }
    
    public string geometryName {
        get {
            return _cache.LookForValueInCache(_geometryName, entry => entry.geometryNameSet, entry => entry.geometryName);
        }
        set {
            if (this.geometryName == value) return;
            _cache.UpdateLocalCache(entry => { entry.geometryNameSet = true; entry.geometryName = value; return entry; });
            InvalidateReliableLength();
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(RealtimeMeshSequenceControllerModel model, T value);
    public event PropertyChangedHandler<int> indexDidChange;
    public event PropertyChangedHandler<string> materialNameDidChange;
    
    private struct LocalCacheEntry {
        public bool indexSet;
        public int index;
        public bool materialNameSet;
        public string materialName;
        public bool geometryNameSet;
        public string geometryName;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
    
    public enum PropertyID : uint {
        Index = 1,
        MaterialName = 2,
        GeometryName = 3,
    }
    
    public RealtimeMeshSequenceControllerModel() : this(null) {
    }
    
    public RealtimeMeshSequenceControllerModel(RealtimeModel parent) : base(null, parent) {
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        UnsubscribeClearCacheCallback();
    }
    
    private void FireIndexDidChange(int value) {
        try {
            indexDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireMaterialNameDidChange(string value) {
        try {
            materialNameDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        int length = 0;
        if (context.fullModel) {
            FlattenCache();
            length += WriteStream.WriteVarint32Length((uint)PropertyID.Index, (uint)_index);
            length += WriteStream.WriteStringLength((uint)PropertyID.MaterialName, _materialName);
            length += WriteStream.WriteStringLength((uint)PropertyID.GeometryName, _geometryName);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.indexSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.Index, (uint)entry.index);
            }
            if (entry.materialNameSet) {
                length += WriteStream.WriteStringLength((uint)PropertyID.MaterialName, entry.materialName);
            }
            if (entry.geometryNameSet) {
                length += WriteStream.WriteStringLength((uint)PropertyID.GeometryName, entry.geometryName);
            }
        }
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var didWriteProperties = false;
        
        if (context.fullModel) {
            stream.WriteVarint32((uint)PropertyID.Index, (uint)_index);
            stream.WriteString((uint)PropertyID.MaterialName, _materialName);
            stream.WriteString((uint)PropertyID.GeometryName, _geometryName);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.indexSet || entry.materialNameSet || entry.geometryNameSet) {
                _cache.PushLocalCacheToInflight(context.updateID);
                ClearCacheOnStreamCallback(context);
            }
            if (entry.indexSet) {
                stream.WriteVarint32((uint)PropertyID.Index, (uint)entry.index);
                didWriteProperties = true;
            }
            if (entry.materialNameSet) {
                stream.WriteString((uint)PropertyID.MaterialName, entry.materialName);
                didWriteProperties = true;
            }
            if (entry.geometryNameSet) {
                stream.WriteString((uint)PropertyID.GeometryName, entry.geometryName);
                didWriteProperties = true;
            }
            
            if (didWriteProperties) InvalidateReliableLength();
        }
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.Index: {
                    int previousValue = _index;
                    _index = (int)stream.ReadVarint32();
                    bool indexExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.indexSet);
                    if (!indexExistsInChangeCache && _index != previousValue) {
                        FireIndexDidChange(_index);
                    }
                    break;
                }
                case (uint)PropertyID.MaterialName: {
                    string previousValue = _materialName;
                    _materialName = stream.ReadString();
                    bool materialNameExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.materialNameSet);
                    if (!materialNameExistsInChangeCache && _materialName != previousValue) {
                        FireMaterialNameDidChange(_materialName);
                    }
                    break;
                }
                case (uint)PropertyID.GeometryName: {
                    _geometryName = stream.ReadString();
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
        }
    }
    
    #region Cache Operations
    
    private StreamEventDispatcher _streamEventDispatcher;
    
    private void FlattenCache() {
        _index = index;
        _materialName = materialName;
        _geometryName = geometryName;
        _cache.Clear();
    }
    
    private void ClearCache(uint updateID) {
        _cache.RemoveUpdateFromInflight(updateID);
    }
    
    private void ClearCacheOnStreamCallback(StreamContext context) {
        if (_streamEventDispatcher != context.dispatcher) {
            UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
        }
        _streamEventDispatcher = context.dispatcher;
        _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
    }
    
    private void UnsubscribeClearCacheCallback() {
        if (_streamEventDispatcher != null) {
            _streamEventDispatcher.RemoveStreamCallback(ClearCache);
            _streamEventDispatcher = null;
        }
    }
    
    #endregion
}
/* ----- End Normal Autogenerated Code ----- */
